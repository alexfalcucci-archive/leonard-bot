{
  "name": "Leonard-bot",
  "tagline": "Leonard is a chat bot for hipchat with a depressing tone, but helpful spirit :)",
  "body": "# Leonard\r\n\r\nLeonard is a chat bot for hipchat with no flare. I have thus deemed him a depressing bot because he doesn't give you fancy html, just plain old messages in XMPP's text format.\r\n\r\nA bit of background for Leonard: One day, when the clouds were super grey and things were quite droll around the office, we had our chat bot based on another popular lib stop responding. Naturally we were saddened at the lack of life from our little buddy!\r\n\r\nWhen we investigated the core cause, it turned out that internally, the library was using the REST API for HipChat for sending all of its messages to elicit a pretty notification card. Furthermore, it turned out that initialization was near impossible because the amount of rooms we had caused him to reach the API limit before he could even get up and running.\r\n\r\nThen after much groveling over the sad loss of our friend, it was decided that no more will we bring a bot into the world (our servers) that could not live long and prosper!\r\n`ENTER LEONARD`\r\nWhile Leonard might not have all the flare of xhtml, he certainly can bolt messages across the internet! His messages, however, are still drab and remind us of our long lost friend of the good old days (07/08/2016), and so I give you Leonard: The bot with a depressing tone, but a helpful spirit!\r\n\r\n## Table of Contents\r\n\r\n* [Bringing Leonard to life](#bringing-leonard-to-life)\r\n* [Listening for messages](#listening-for-messages)\r\n* [Responding to messages](#responding-to-messages)\r\n* [Getting user info within a callback](#getting-user-info-within-a-callback)\r\n* [Plugins](#plugins)\r\n\r\n## Bringing Leonard to life\r\n\r\nTo bring Leonard to life, you only need to import this library and initialize a Leonard object with a JSON Object containing your jabber ID (jid) and password. Example:\r\n\r\n```javascript\r\nvar Leonard = require(\"leonard-bot\");\r\n\r\nvar bot = new Leonard({\r\n  jid:'example_jid@chat.hipchat.com',\r\n  password: 'password',\r\n});\r\n```\r\n\r\nLeonard will automatically gather information about current rooms and users that are present on the chat. You will see the following console output during normal initialization:\r\n\r\n```\r\nLoading plugins...\r\nLoading options...\r\nNegotiating session...\r\nStarting Leonard...\r\nGetting room list...\r\nJoining rooms...\r\nDone! :)\r\n```\r\n\r\nAfter startup, Leonard will now be listening intently to your conversations.\r\n\r\n## Listening for messages\r\n\r\nLeonard uses RegExp to listen for specific messages. Leonard can also distinguish between mentions and normal\r\ngroupchat messages. If you wish to listen for a groupchat message, you can use the `onMessage` method. For mentions, use\r\n`onMention`. Both of these methods require the params `(regex|string, callback)` where callback has the function signature\r\nof `function(client, message, [params])`. Note that `params` is optional\r\n\r\nFor the callback, `client` is the bot object, `message` is the Message object created on receipt of the message, and `params`\r\nare the array of captures from the RegExp used (if available).\r\n\r\nAn example of a message handler that prints out a user's name after a \"Hello my name is _____\" message:\r\n```javascript\r\nbot.onMessage(/Hello my name is (.*)/i, function(client, message, params){\r\n  console.log(params[0]);\r\n});\r\n```\r\n\r\n## Responding to messages\r\n\r\nLeonard would be pretty useless if he couldn't talk back to people. In order to respond to messages that you listen for,\r\nyou must use the `client.send(message)` method. The following echoes back whatever message Leonard hears:\r\n\r\n```javascript\r\nbot.onMessage(/.*/, function(client, message){\r\n  client.send(message);\r\n});\r\n```\r\n\r\nHowever this is a bit boring. If we want to respond with our own message, we can choose to reply to the room the message\r\nwas received from with a general message, or we can have Leonard mention the user that sent the received message. Either\r\ncase is easy since each Message object has the methods `newResponse(content)` and `newReply(content)`. If you want to\r\nsend a general message back to the room, use `message.newResponse(content)` to construct a new message. If you want to\r\nmention the original sender, use `message.newReply(content)`. Finally, to send the reply we again use `client.send(newMessage)`.\r\n\r\nPutting it all together, the following code creates a handler for `good morning` messages and responds to the user\r\nwith a polite `@user_mention_name Good morning! How are you?`\r\n\r\n```javascript\r\nbot.onMessage(/good morning/i, function(client, message){\r\n  client.send(message.newReply(\"Good morning! How are you?\"));\r\n});\r\n```\r\n\r\nYou can also, of course, create your own Message object for sending which allows you to specify a room.\r\nThis is useful if you wish to perform broadcasts in a different room than that in which the message was received.\r\n\r\n## Getting user info within a callback\r\n\r\nIf you wish to access user info, Leonard stores users within the `users` attribute. The `users` attribute on a Leonard\r\nbot is stored as map[userJID]userObject where userObject contains the user's JID, nickname, and mention name.\r\n\r\n```javascript\r\n//example user bot.users[\"123456_jid@chat.hipchat.com\"]\r\n{\r\n  \"jid\": \"123456_jid@chat.hipchat.com\",\r\n  \"nick\": \"Jimmy Smith\",\r\n  \"mentionName\": \"JSmith\"\r\n}\r\n```\r\n\r\nSince the bot object reference is passed into the callback for a message handler, you can easily retrieve user information\r\nat any time when handling a message.\r\n\r\n## Plugins\r\n\r\nLeonard can use plugins which are registered upon instantiation of the leonard-bot `Plugin` object.\r\nThe following registers a plugin module names \"test\" and adds a general listener for a hello message:\r\n\r\n```javascript\r\nvar Leonard = require(\"leonard-bot\");\r\nvar Plugin = Leonard.Plugin;\r\n\r\nvar testPlugin = new Plugin(\"test\")\r\ntestPlugin.onMessage(/hello/i, function(client, message){\r\n  client.send(message.newResponse(\"Hello!\"));\r\n})\r\ntestPlugin.onMention(/hello/i, function(client, message){\r\n  client.send(message.newReply(\"sup\"));\r\n})\r\n\r\nvar l = new Leonard({\r\n  jid:'example_jid@chat.hipchat.com',\r\n  password: 'password',\r\n});\r\n```\r\n\r\nEasy as that. By instantiating a new plugin object Leonard will automatically add it to its registry. By typing `hello` into your HipChat client, Leonard will perform a general reply with `Hello!`. However, by mentioning him using `@mention_name hello` he will now respond with `@your_name sup`, thus replying directly to you.\r\n\r\nPlugins should be preferred because it promotes modularization rather than monolithic code development. If you wish\r\nto place your plugins into a folder with separate files instead, you can specify a plugin folder for Leonard by setting\r\nthe `pluginDir` option when initializing the bot. This will cause all proper plugins to be automatically loaded into\r\nthe registry upon initializing the bot.\r\n\r\n__Note that any plugins registered after the bot is initialized will not be active.__\r\n\r\n## API reference\r\n\r\nTODO\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}